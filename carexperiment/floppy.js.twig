/* Change log
2015-02-21
    - Daniel F. Added action_codes variable (object) storing all the user actions codes by name and value. 
      Do not use values 0 for action codes

*/

var


action_codes = { coin_collect: 1000,  shuttle_choice_detour : 2000, shuttle_choice_ride : 3000  },


// Ofer Game vars //
isGamePaused = false,
frameid,
homeUrl = 'http://jewkesy.github.io/Flappy/',
canvas,
ctx,
width,
height,
car_offset=0,
hit=100,
shuttleChoice=false,
shuttle_delay=0,
shuttle_wait=200,//0*Math.random(),
shuttle_speed=0.05+Math.random(),
delays=false,
shuttle_retract=0,
shuttle_forward=0,
detourChoice=false,
x_offset=0, 
second_x_offset=0,
y_offset=0,
second_y_offset=0,
stage=1,
trial_time=0,


shuttle_speed_low=0.4, 
shuttle_speed_med=1.5,
shuttle_speed_high=4,
shuttle_wait_long=800,
shuttle_wait_med=250,
shuttle_wait_short=25,
ind=1, // index to shuttle choices (first, second, etc.)

session={{ session_number }},


// these are the state variables of the car around the lake: 
junction_before_choice=false, // during this time the car will go to the junction
junction_choice=false, // during this time the car waits at the junction
junction_shuttle_positioning=false, // durign this time the car position itself on the dock after shuttle choice
junction_wait_for_shuttle=false, // during this stage the care waits for the shuttle at the dock
junction_taking_detour1=false, // the car takes the detour 1. down the lake
junction_taking_detour2=false, // the car takes the detour 2. starit on bottom of lake
junction_taking_detour3=false, // the car takes the detour 3. up the lake towards the end



scrollTextPos = 0,
fgpos = 0,
frames = 0,
score = 0,
pipeGapMin = 90,
pipeGapMax = 150,
pipeGap = pipeGapMax,
best = localStorage.getItem("best") || 0,

// State vars //

currentstate,
states = {
	Splash: 0, Game: 1, Score: 2, Junction: 3,
},

// Game objects //

/**
 * Ok button initiated in main()
 */
okbtn,

/**
* Share button initiated in main()
*/
sharebtn,
shuttlebtn,
detourbtn,

/**
 * The bird
 */
bird = {

	x: 60,
	y: 0,

	frame: 0,
	velocity: 0,
	animation: [0, 1, 2, 1], // animation sequence

	rotation: 0,
	radius: 12,

	gravity: 0.25,
	_jump: 4.6,

	/**
	 * Makes the bird "flap" and jump
	 */
	jump: function() {
		this.velocity = -this._jump;
	},

	/**
	 * Update sprite animation and position of bird
	 */
	update: function() {
		// make sure animation updates and plays faster in gamestate
		var n = currentstate === states.Splash ? 10 : 5;
		this.frame += frames % n === 0 ? 1 : 0;
		this.frame %= this.animation.length;

		// in splash state make bird hover up and down and set rotation to zero
		if (currentstate === states.Splash) {
			this.y = height - 280 + 5*Math.cos(frames/10);
			this.rotation = 0;
		} else if (currentstate === states.Junction) {
			this.y = car_offset + height - 180 + 5*Math.cos(frames/10);
			this.rotation = 0;
			this.x=75;//135;
		}
		else { // game and score state

			this.velocity += this.gravity;
			this.y += this.velocity;

			


			// change to the score state when bird touches the ground

			if (this.y >= height - s_fg.height-10) {
				this.y = height - s_fg.height-10;
			    //this.rotation =0.3;
				this.velocity = 0;
			} 
			/*
			if (this.y >= height - s_fg.height-10) {
				this.y = height - s_fg.height-10;
				if (currentstate === states.Game) {
					currentstate = states.Score;
				}
				// sets velocity to jump speed for correct rotation
				this.velocity = this._jump;
			} */

			// when bird lack upward momentum increment the rotation angle

			if(this.velocity==0) this.rotation=0;
			else if(this.velocity>0) this.rotation=0.4;
			else if(this.velocity<0) this.rotation=-0.4;

		}
	},

	/**
	 * Draws bird with rotation to canvas ctx
	 *
	 * @param  {CanvasRenderingContext2D} ctx the context used for drawing
	 */
	draw: function(ctx) {
		ctx.save();
		// translate and rotate ctx coordinatesystem
		ctx.translate(this.x, this.y);
		ctx.rotate(this.rotation);

		var n = this.animation[this.frame];
		// draws the bird with center in origo
		s_bird[n].draw(ctx, -s_bird[n].width/2, -s_bird[n].height/2);

		ctx.restore();
	}
},

/**
 * The pipes
 */
pipes = {
	_pipes: [],

	/**
	 * Empty pipes array
	 */
	reset: function() {
		this._pipes = [];
		pipeGap = pipeGapMax;
	},

	/**
	 * Create, push and update all pipes in pipe array
	 */
	update: function() {
		// add new pipe each 100 frames
		if (frames % 100 === 0) {
			// calculate y position
			var _y = height - (s_pipeSouth.height+s_fg.height+120+200*Math.random());

			// create and push pipe to array
			if (pipeGap > pipeGapMin) {
				pipeGap = pipeGap -5;
			}

			this._pipes.push({
				gap: pipeGap,
				x: 500,
				y: _y,
				width: s_pipeSouth.width,
				height: s_pipeSouth.height
			});
		}
		for (var i = 0, len = this._pipes.length; i < len; i++) {
			var p = this._pipes[i];
			



	// Ofer's version starts here ----------------
			
			

			if(p.x==60){//bird.x-p.x<-10 && bird.x-p.x>10){

				var x=Math.floor(bird.y) - Math.floor(p.y) - 300;//-(358-bird.y);//-p.y;//-p.height;
				if(x<0)x=999;
				if(x<120){score++; hit=0; Report_user_action(action_codes['coin_collect'],stage-1); }
				if(trial_time>1000){
					trial_time=0;
					stage++;
					if(stage<6){
						currentstate = states.Junction;	
						junction_before_choice=true;
					}
					else{
						reset_game_vars();
						stage=1;
						hideGameCanvas();
						//session++;
						// if(session>10) { session++; go to survey...}
						//else {go to final survey ; end the game}
						//
						// 
					}
					
					
				} 
					
			}


	// Ofer's version ends here ----------------


			
			
			
			// move pipe and remove if outside of canvas
			p.x -= 2;
			if (p.x < -p.width) {
				this._pipes.splice(i, 1);
				i--;
				len--;
			}
		}
	},

	/**
	 * Draw all pipes to canvas context.
	 *
	 * @param  {CanvasRenderingContext2D} ctx the context used for drawing
	 */
	draw: function(ctx) {
		for (var i = 0, len = this._pipes.length; i < len; i++) {
			if(hit<55 && i==0)
			{

				// glow effect
				hit++;//=false;
			}
			else{
			var p = this._pipes[i];
			s_pipeSouth.draw(ctx, p.x, p.y);
			s_pipeNorth.draw(ctx, p.x, p.y+p.gap+p.height);
		    }
			//console.log(p)
		}
	}
},

backgroundFx = {
	setBGGradient: function(hour, minute) {      // create linear gradient based upon time of day
			var grd = ctx.createLinearGradient(0, canvas.width/2, 0, canvas.width);
			grd.addColorStop(0, '#2d91c2');
			grd.addColorStop(1, '#1e528e');
			ctx.fillStyle = grd;
      		ctx.fill();
	},

	update: function() {
		if (frames % 60 === 0) {
			var date = new Date;
			//var seconds = date.getSeconds();
			//var minutes = date.getMinutes();
			var hour = date.getHours();
			//var hour = Math.ceil(date.getSeconds()/2.5);  //for debug
			//if (hour == 24) hour = 0;
			//console.log(hour)
			this.setBGGradient(hour);
		}
	}
};



function reset_game_vars(){

car_offset=0;
hit=100;
shuttleChoice=false;
shuttle_delay=0;
shuttle_wait=200; //0*Math.random(),
//shuttle_speed=0.05+Math.random();
delays=false;
shuttle_retract=0;
shuttle_forward=0;
detourChoice=false;
x_offset=0; 
second_x_offset=0;
y_offset=0;
second_y_offset=0;
stage=1;
scrollTextPos = 0;
fgpos = 0;
frames = 0;
pipeGapMin = 90;
pipeGapMax = 150;
pipeGap = pipeGapMax;
best = localStorage.getItem("best") || 0;

}
/**
 * Called on mouse or touch press. Update and change state
 * depending on current game state.
 *
 * @param  {MouseEvent/TouchEvent} evt tho on press event
 */
function onpress(evt) {
//document.getElementById("consoleMe").innerHTML = evt.type;
	
	switch (currentstate) {

		// change state and update bird velocity
		case states.Splash:
			currentstate = states.Game;
			bird.jump();
			break;
			
		case states.Junction:
			
			var mx = evt.offsetX, my = evt.offsetY;
			if(mx<10){shuttle_delay=shuttle_wait; shuttle_speed=2;}
			if (mx == null || my == null) {
				mx = evt.touches[0].clientX;
				my = evt.touches[0].clientY;
			}

			if (shuttlebtn.x < mx && mx < shuttlebtn.x + shuttlebtn.width && shuttlebtn.y < my && my < shuttlebtn.y + shuttlebtn.height) {
				//location.hash='share'
				if(junction_choice){
					Report_user_action(action_codes['shuttle_choice_ride'],stage-1);
					set_shuttle_performance();
					shuttleChoice=true;
					detourChoice=false;
					junction_choice=false;
					junction_shuttle_positioning=true;
				}
				//window.open('http://twitter.com/share?url=' + homeUrl + '&text=I scored ' + score +  ' on FlappyJS!!&hashtags=flappybird,flappy')
			}

			if (detourbtn.x < mx && mx < detourbtn.x + detourbtn.width && detourbtn.y < my && my < detourbtn.y + detourbtn.height) {
				//location.hash='share'
				if(junction_choice){
					Report_user_action(action_codes['shuttle_choice_detour'],stage-1);
					detourChoice=true;
					shuttleChoice=false;
					junction_choice=false;
					junction_taking_detour1=true;

				}
				//window.open('http://twitter.com/share?url=' + homeUrl + '&text=I scored ' + score +  ' on FlappyJS!!&hashtags=flappybird,flappy')
			}
			//bird.jump();
			break;

		// update bird velocity
		case states.Game:
			bird.jump();
			break;

		// change state if event within okbtn bounding box
		case states.Score:
		//	if (evt.type != 'mousedown') return;
			// get event position
 			var mx = evt.offsetX, my = evt.offsetY;

			if (mx == null || my == null) {
				mx = evt.touches[0].clientX;
				my = evt.touches[0].clientY;
			}

			if (sharebtn.x < mx && mx < sharebtn.x + sharebtn.width && sharebtn.y < my && my < sharebtn.y + sharebtn.height) {
				//location.hash='share'
				window.open('http://twitter.com/share?url=' + homeUrl + '&text=I scored ' + score +  ' on FlappyJS!!&hashtags=flappybird,flappy')
			}

			else {
// 			// check if within
		//	if (okbtn.x < mx && mx < okbtn.x + okbtn.width &&	okbtn.y < my && my < okbtn.y + okbtn.height) {
				pipes.reset();
				currentstate = states.Splash;
				
				//location.hash='game'
	//		}
}
			break;

	}
	evt.preventDefault();
}

/**
 * Starts and initiate the game
 */
function main() {
	// create canvas and set width/height
	canvas = document.createElement("canvas");

        canvas.setAttribute('id','gamecanvas');

	width = window.innerWidth;
	height = window.innerHeight;

	//var evt = "touchStart";
	if (width >= 500) {
		width  = 320;
		height = 480;
		canvas.style.border = "1px solid #000";
		//evt = "mousedown";
	}

// // prevent elastic scrolling
// document.body.addEventListener('touchmove',function(event){
//   event.preventDefault();
// },false);	// end body:touchmove


	// listen for input event
	//document.addEventListener(evt, onpress);
        /*
         * 01/19/2015 Daniel F. Added event handler to canvas only.
         */
	canvas.addEventListener("touchstart", onpress)
	canvas.addEventListener("mousedown", onpress)

	canvas.width = width;
	canvas.height = height;
	scrollTextPos = width*1.5;
	if (!(!!canvas.getContext && canvas.getContext("2d"))) {
		alert("Your browser doesn't support HTML5, please update to latest version");
	}
	ctx = canvas.getContext("2d");

	currentstate = states.Splash;
	// append canvas to document
	document.body.appendChild(canvas);

	// initate graphics and buttons
	var img = new Image();
	img.onload = function() {
		initSprites(this);

		backgroundFx.update();

		okbtn = {
			x: (width - s_buttons.Ok.width)/2,
			y: height - 200,
			width: s_buttons.Ok.width,
			height: s_buttons.Ok.height
		}

		sharebtn = {
			x: (width - s_buttons.Share.width)/2,
			y: height - 150,
			width: s_buttons.Share.width,
			height: s_buttons.Share.height,
		}

		shuttlebtn = {
			x: 200,//(width - s_buttons.Shuttle.width)/2,
			y: 187,//height - 150,
			width: s_buttons.Shuttle.width,
			height: s_buttons.Shuttle.height,
		}

		detourbtn = {
			x: 200,//(width - s_buttons.Detour.width)/2,
			y: 375,//height - 150,
			width: s_buttons.Detour.width,
			height: s_buttons.Detour.height,
		}

		run();
	}

		var date = new Date;
		var hour = date.getHours();
		var month = date.getMonth();
		img.src = "./gamefiles/res/sheet.png";
}


function debugLog(txt) {
	if(window.location.hash) {
		document.getElementById("consoleMe").innerHTML = txt;
	}
}

/**
 * Starts and update gameloop
 */
function run() {
	
	loop();
}

/*
 * 1/19/2015 Took out the loop animation out of the run method 
 */
function loop()
{
    if( ! isGamePaused )
    {
        update();
    }
    
    render();
    frameid = window.requestAnimationFrame(loop, canvas);
    
}

/**
 * Update foreground, bird and pipes position
 */
function update() {
	frames++;

	if (currentstate !== states.Score) {
		fgpos = (fgpos - 2) % 14;
	} else {
		// set best score to maximum score
		best = Math.max(best, score);
		try {
			localStorage.setItem("best", best);
		} catch(err) {
			//needed for safari private browsing mode
		}
		scrollTextPos = width*1.5;
	}
	if (currentstate === states.Game) {
		pipes.update();
	}

	bird.update();
	backgroundFx.update();
}

/**
 * Draws bird and all pipes and assets to the canvas
 */
function render() {
	// draw background color
	ctx.fillRect(0, 0, width, height);
	// draw background sprites
	switch(stage)
	{
		case 1: s_bg.draw(ctx, 0, height - s_bg2.height); break;
		case 2: s_bg2.draw(ctx, 0, height - s_bg2.height); break;
		case 3: s_bg3.draw(ctx, 0, height - s_bg2.height); break;
		case 4: s_bg4.draw(ctx, 0, height - s_bg2.height); break;
		case 5: s_bg5.draw(ctx, 0, height - s_bg2.height); break;
		case 6: s_bg6.draw(ctx, 0, height - s_bg2.height); break;

	}
	
	//s_bg.draw(ctx, s_bg.width, height - s_bg.height);

	pipes.draw(ctx);
	//bird.draw(ctx);

	// draw foreground sprites
	s_fg.draw(ctx, fgpos, height - s_fg.height+100);
	s_fg.draw(ctx, fgpos+s_fg.width-20, height - s_fg.height+100);

	var width2 = width/2; // center of canvas

	if (currentstate === states.Splash) {
		// draw splash text and sprite to canvas
		
		s_splash.draw(ctx, width2 - s_splash.width/2, height - 300);
		s_text.GetReady.draw(ctx, width2 - s_text.GetReady.width/2, height-380);

		if (scrollTextPos < (0-s_text.FlappyBird.width-width)) {
			scrollTextPos = width*1.5;
		}

		scrollTextPos = scrollTextPos -3;
		s_text.FlappyBird.draw(ctx, scrollTextPos, s_fg.height+300);
	}
	





/*
// these are the state variables of the car around the lake: 
junction_before_choice=false, // during this time the car will go to the junction
junction_choice=false, // during this time the car waits at the junction
junction_shuttle_positioning=false, // durign this time the car position itself on the dock after shuttle choice
junction_wait_for_shuttle=false, // during this stage the care waits for the shuttle at the dock
junction_taking_detour1=false, // the car takes the detour around the lake
*/

	
	if (currentstate === states.Game) trial_time++;
	
	if (currentstate === states.Junction) {
		


		// first, take the car to the junction
		if(junction_before_choice){
			if(car_offset==0)car_offset=100;  // this set the y offset of the car on the road
			if(car_offset>2)car_offset-=2; // lifting the car up, slowly toward the junction
			s_junction.drawX(ctx,  0, height - 500, x_offset, 0); // drawX = function(ctx, x, y, x_offset, y_offset)
			var w5=width/5;
			if(x_offset<w5) x_offset++;
			else{ // we reached the junction!
				junction_before_choice=false;
				junction_choice=true;	
			}
		}

		if(junction_choice){ // the car is now at the junction, with car offset lifting it slightly until it reaches the right position waiting 

			s_junction.drawX(ctx,  0, height - 500, x_offset, 0); // we now draw the buttons of the 'shuttle' and 'detour' when the car is waiting:
			//s_buttons.Shuttle.draw(ctx, okbtn.x+77, okbtn.y-100);
			//s_buttons.Detour.draw(ctx, sharebtn.x+77, sharebtn.y+35);
			s_buttons.Shuttle.draw(ctx, shuttlebtn.x, shuttlebtn.y);
			s_buttons.Detour.draw(ctx, detourbtn.x, detourbtn.y);
		} 



		if(shuttleChoice){
		   // ajaxFunction(1,2,3);
			junction_choice=false;
			if(junction_shuttle_positioning){ // we now deal with moving the car up, and the image right to place the care at the loading dock waiting spot
				var w2=width/1.2;
				if(x_offset<w2) {
					x_offset++;
				    bird.rotation=-0.4;
				    s_junction.drawX(ctx, 0, height - 500, x_offset, 0);
				    if(car_offset>-190)car_offset--;
				}
				else { 
					bird.rotation=0; 
					junction_wait_for_shuttle=true;
					junction_shuttle_positioning=false;
				}
				//s_junction.draw(ctx, x_offset+i+width2 - s_splash.width/2+50, height - 500);
				
			}
			
			
		    if(junction_wait_for_shuttle){//second_x_offset>400){
		    	shuttle_delay++;
		    	bird.rotation=0;
		    	s_junction.drawX(ctx, 0, height - 500, x_offset, 0);
		    	if(shuttle_delay>shuttle_wait){
		    		if(shuttle_speed===shuttle_speed_high) s_shuttleX.draw(ctx, shuttle_retract + width2*1.8, height - 410);// shuttle_retract + 500+x_offset+width2 - s_splash.width/2+50, height - 410);
		    		else if(shuttle_speed===shuttle_speed_low)s_shuttleO.draw(ctx, shuttle_retract + width2*1.8, height - 410);
                                else s_shuttle.draw(ctx, shuttle_retract + width2*1.8, height - 410);
		    		if(shuttle_retract>-width/1.4)shuttle_retract-=shuttle_speed;
		    		else if(shuttle_forward<width*1.3){
		    			
		    			shuttle_forward+=shuttle_speed;
		    			x_offset+=shuttle_speed;
		    		}
		    		else {
		    		detourChoice=false;
		    		shuttleChoice=false;
		    		shuttle_forward=0;
		    		shuttle_retract=0;
		    		shuttle_delay=0;
		    		delays=false;

		    		x_offset=0;
		    		second_x_offset=0;
		    		y_offset=0;
		    		bird.rotation=0;
		    		second_y_offset=0;
		    		car_offset=0;
		    		
		    		junction_wait_for_shuttle=false;
		    		currentstate = states.Game;
		    	  }
		    	}
		    	else {
		    		if(delays) s_text_delays.draw(ctx, okbtn.x+10, okbtn.y-170);
		    		else s_buttons.Share.draw(ctx, okbtn.x+10, okbtn.y-170); // Share is wait...

		    	} 
		    	
		    }


		}

		if(detourChoice){
			
			if(junction_taking_detour1){ // first drive down 
				bird.rotation=0.5;
				//s_junction.drawX(ctx, 0, height - 500, second_x_offset*1.22, second_x_offset*1.7);
				s_junction.drawX(ctx, 0, 0, second_x_offset*1.22, second_x_offset*1.7);
			    //if(second_x_offset<height*1.1) second_x_offset+=0.4;
			    if(second_x_offset<530) second_x_offset+=1.6;
			    else{junction_taking_detour1=false; junction_taking_detour2=true;}
			}

			if(junction_taking_detour2){ // second part, flat 
				bird.rotation=0;
				//s_junction.drawX(ctx, 0, height - 500, second_x_offset*1.22, height*1.1*1.7);
				s_junction.drawX(ctx, 0, 0, second_x_offset*1.22, 900);
			    //if(second_x_offset<height*1.65) second_x_offset+=0.5;
			    if(second_x_offset<800) second_x_offset+=1.5;
			    else{y_offset=0; junction_taking_detour2=false; junction_taking_detour3=true;}
			}

			if(junction_taking_detour3){ // last drive up 
				bird.rotation=-0.9;
				//s_junction.drawX(ctx, 0, height - 500, second_x_offset*1.22, (height*1.1*1.7)-y_offset);
				s_junction.drawX(ctx, 0, 0, second_x_offset*1.22, 900-y_offset);
			    //if(y_offset<height*1.7) y_offset+=0.5;
			    if(y_offset<816) y_offset+=1.6;
			    else{
		    		junction_taking_detour3=false;
		    		detourChoice=false;
		    		shuttleChoice=false;
		    		x_offset=0;
		    		second_x_offset=0;
		    		y_offset=0;
		    		bird.rotation=0;
		    		second_y_offset=0;
		    		car_offset=0;
		    		
		    		i=0;
		    		currentstate = states.Game;
		    	}
			}
		}	

		
	}
	
	
	if (currentstate === states.Score) {
		// draw gameover text and score board
		
		s_text.GameOver.draw(ctx, width2 - s_text.GameOver.width/2, height-400);
		s_score.draw(ctx, width2 - s_score.width/2, height-340);
		s_buttons.Ok.draw(ctx, okbtn.x, okbtn.y);
		s_buttons.Share.draw(ctx, sharebtn.x, sharebtn.y);

		// draw score and best inside the score board
		s_numberS.draw(ctx, width2-47, height-304, score, null, 10);
		s_numberS.draw(ctx, width2-47, height-262, best, null, 10);

	} else {
		// draw score to top of canvas
		if(currentstate!=states.Junction) s_numberB.draw(ctx, null, 20, score, width2);
	}
	bird.draw(ctx);
}






 function Report_user_action(user_choice, game_state) // choice will return 1 for shuttle and 2 for detour
{
    var client = new XMLHttpRequest();
    // not new postdata= "action=user_choice & state=game_state"; // is this an appropriate format?  
    var postdata = "action=" + encodeURIComponent(unescape(user_choice)) + "&state=" + encodeURIComponent(unescape(game_state));
    client.open("POST", "gamefiles/php/saveClickData.php");
    client.setRequestHeader('Content-Type','application/x-www-form-urlencoded') // do I need to worry about this? 
    client.send(postdata);
    
}

function set_shuttle_performance() // choice will return 1 for shuttle and 2 for detour
{ 
  switch(session){
  	case 1: 
  	   if(ind===1) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_med; }
  	   else if(ind===2) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_high; }
  	   else if(ind===3) {shuttle_wait=shuttle_wait_long; shuttle_speed=shuttle_speed_low; }
  	   else if(ind===4) {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_high; }
  	   else  {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_low;}
  	break;

  	case 2: 
  	   if(ind===1) {shuttle_wait=shuttle_wait_long; shuttle_speed=shuttle_speed_high; }
  	   else if(ind===2) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_low;}
  	   else if(ind===3) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_high;}
  	   else if(ind===4) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_med; }
  	   else  {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_high;}
  	break;

  	case 3: 
  	   if(ind===1) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_med; }
  	   else if(ind===2) {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_high; }
  	   else if(ind===3) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_high; }
  	   else if(ind===4) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_med; }
  	   else  {shuttle_wait=shuttle_wait_long; shuttle_speed=shuttle_speed_low; }
  	break;

  	case 4: 
  	   if(ind===1) {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_high; }
  	   else if(ind===2) {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_high; }
  	   else if(ind===3) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_low; }
  	   else if(ind===4) {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_low;}
  	   else  {shuttle_wait=shuttle_wait_long; shuttle_speed=shuttle_speed_high;}

  	   // great performance:

  	case 5: 
  	   if(ind===1) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_high;}
  	   else if(ind===2) {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_med;}
  	   else if(ind===3) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_high;}
  	   else if(ind===4) {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_med;}
  	   else  {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_high; }
  	break;

  	case 6: 
  	   if(ind===1) {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_high;}
  	   else if(ind===2) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_high; }
  	   else if(ind===3) {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_med;}
  	   else if(ind===4) {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_med;}
  	   else  {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_high;}
  	break;

      // bad performance

  	case 7: 
  	   if(ind===1) {shuttle_wait=shuttle_wait_long; shuttle_speed=shuttle_speed_low;}
  	   else if(ind===2) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_low;}
  	   else if(ind===3) {shuttle_wait=shuttle_wait_long; shuttle_speed=shuttle_speed_med;}
  	   else if(ind===4) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_low;}
  	   else  {shuttle_wait=shuttle_wait_long; shuttle_speed=shuttle_speed_low; }
  	break;

  	case 8: 
  	   if(ind===1) {shuttle_wait=shuttle_wait_long; shuttle_speed=shuttle_speed_low; }
  	   else if(ind===2) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_low; }
  	   else if(ind===3) {shuttle_wait=shuttle_wait_long; shuttle_speed=shuttle_speed_low; }
  	   else if(ind===4) {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_med; }
  	   else  {shuttle_wait=shuttle_wait_long; shuttle_speed=shuttle_speed_low; }
  	break;

  	// random performance:

  	case 9: 
  	    if(ind===1) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_med; }
  	   else if(ind===2) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_high; }
  	   else if(ind===3) {shuttle_wait=shuttle_wait_long; shuttle_speed=shuttle_speed_low; }
  	   else if(ind===4) {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_high; }
  	   else  {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_low; }
  	break;

  	case 10: 
  	   if(ind===1) {shuttle_wait=shuttle_wait_long; shuttle_speed=shuttle_speed_high; }
  	   else if(ind===2) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_low; }
  	   else if(ind===3) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_high; }
  	   else if(ind===4) {shuttle_wait=shuttle_wait_med; shuttle_speed=shuttle_speed_med;}
  	   else  {shuttle_wait=shuttle_wait_short; shuttle_speed=shuttle_speed_high;}
  }
  ind++;
    
}

// start and run the game
window.onload = function () {
	main();
};

function hideGameCanvas()
{
    /*
     isGamePaused = true;
     var canvas = document.getElementById("gamecanvas");
     var form = document.getElementById("survey_form");
     canvas.style.display = 'none';
     form.style.display = 'block';
    */
   
   window.location.href = '{{survey_url}}';

   // './survey.php';
   
}

function showGameCanvas()
{
    isGamePaused = false;
    var canvas = document.getElementById("gamecanvas");
    var form = document.getElementById("survey_form");
    form.style.display = 'none';
    canvas.style.display = 'block';
    
    return false;
    
}


